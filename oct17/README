Sure! Let's go through the Python script line by line to understand how it converts a Jenkinsfile stage to a GitHub Actions workflow.

### Python Script

```python
import re
import yaml
```
- **`import re`**: Imports the `re` module, which provides support for regular expressions.
- **`import yaml`**: Imports the `yaml` module, which allows us to work with YAML files.

```python
def extract_stages(jenkinsfile_content):
    stage_pattern = re.compile(r"stage\('([^']+)'\) \{(.*?)\}", re.DOTALL)
    return stage_pattern.findall(jenkinsfile_content)
```
- **`def extract_stages(jenkinsfile_content):`**: Defines a function to extract stages from the Jenkinsfile content.
- **`stage_pattern = re.compile(r"stage\('([^']+)'\) \{(.*?)\}", re.DOTALL)`**: Compiles a regular expression to match stages in the Jenkinsfile. The pattern captures the stage name and its content.
- **`return stage_pattern.findall(jenkinsfile_content)`**: Uses the compiled pattern to find all matches in the Jenkinsfile content and returns them as a list of tuples.

```python
def extract_steps(stage_content):
    steps_pattern = re.compile(r"steps \{(.*?)\}", re.DOTALL)
    steps_match = steps_pattern.search(stage_content)
    if not steps_match:
        raise ValueError("Steps not found in stage.")
    return steps_match.group(1)
```
- **`def extract_steps(stage_content):`**: Defines a function to extract steps from a stage's content.
- **`steps_pattern = re.compile(r"steps \{(.*?)\}", re.DOTALL)`**: Compiles a regular expression to match the steps block within a stage.
- **`steps_match = steps_pattern.search(stage_content)`**: Searches for the steps block in the stage content.
- **`if not steps_match:`**: Checks if no match is found.
- **`raise ValueError("Steps not found in stage.")`**: Raises an error if no steps block is found.
- **`return steps_match.group(1)`**: Returns the matched steps block.

```python
def convert_step_to_github_action(step):
    if "sh" in step:
        script = re.search(r"sh \(returnStdout: true, script: '''(.*?)''' \)", step, re.DOTALL).group(1)
        return {
            "name": "Run shell script",
            "run": script.strip().strip("'''")
        }
    elif "configFileProvider" in step:
        return {
            "name": "Download configuration file",
            "run": "aws s3 cp s3://your-bucket/nuget-managed-config ${{ github.workspace }}/nuget-managed-config"
        }
    elif "container" in step:
        return {
            "name": "Set up Docker",
            "run": "sudo apt-get install -y docker.io && sudo systemctl start docker"
        }
    return None
```
- **`def convert_step_to_github_action(step):`**: Defines a function to convert a Jenkins step to a GitHub Actions step.
- **`if "sh" in step:`**: Checks if the step contains a shell script command.
- **`script = re.search(r"sh \(returnStdout: true, script: '''(.*?)''' \)", step, re.DOTALL).group(1)`**: Extracts the shell script content.
- **`return {"name": "Run shell script", "run": script.strip().strip("'''")}`**: Returns a dictionary representing the GitHub Actions step for running the shell script.
- **`elif "configFileProvider" in step:`**: Checks if the step contains a config file provider command.
- **`return {"name": "Download configuration file", "run": "aws s3 cp s3://your-bucket/nuget-managed-config ${{ github.workspace }}/nuget-managed-config"}`**: Returns a dictionary representing the GitHub Actions step for downloading a configuration file.
- **`elif "container" in step:`**: Checks if the step contains a container command.
- **`return {"name": "Set up Docker", "run": "sudo apt-get install -y docker.io && sudo systemctl start docker"}`**: Returns a dictionary representing the GitHub Actions step for setting up Docker.
- **`return None`**: Returns `None` if the step does not match any known patterns.

```python
def generate_github_actions_yaml(stages):
    jobs = {}
    for stage_name, stage_content in stages:
        steps_content = extract_steps(stage_content)
        steps = steps_content.split("\n")
        github_steps = []

        for step in steps:
            github_step = convert_step_to_github_action(step)
            if github_step:
                github_steps.append(github_step)

        job_name = stage_name.lower().replace(' ', '-')
        jobs[job_name] = {
            "runs-on": "ubuntu-latest",
            "steps": github_steps
        }

    workflow = {
        "name": "CI Pipeline",
        "on": {
            "push": {
                "branches": ["main"]
            },
            "pull_request": {}
        },
        "jobs": jobs
    }
    return yaml.dump(workflow, sort_keys=False)
```
- **`def generate_github_actions_yaml(stages):`**: Defines a function to generate the GitHub Actions YAML content from the extracted stages.
- **`jobs = {}`**: Initializes an empty dictionary to hold the jobs.
- **`for stage_name, stage_content in stages:`**: Iterates over the extracted stages.
- **`steps_content = extract_steps(stage_content)`**: Extracts the steps content from the stage.
- **`steps = steps_content.split("\n")`**: Splits the steps content into individual steps.
- **`github_steps = []`**: Initializes an empty list to hold the GitHub Actions steps.
- **`for step in steps:`**: Iterates over the individual steps.
- **`github_step = convert_step_to_github_action(step)`**: Converts the Jenkins step to a GitHub Actions step.
- **`if github_step:`**: Checks if the conversion was successful.
- **`github_steps.append(github_step)`**: Adds the converted step to the list of GitHub Actions steps.
- **`job_name = stage_name.lower().replace(' ', '-')`**: Converts the stage name to a job name suitable for GitHub Actions.
- **`jobs[job_name] = {"runs-on": "ubuntu-latest", "steps": github_steps}`**: Adds the job to the jobs dictionary.
- **`workflow = {"name": "CI Pipeline", "on": {"push": {"branches": ["main"]}, "pull_request": {}}, "jobs": jobs}`**: Constructs the workflow dictionary.
- **`return yaml.dump(workflow, sort_keys=False)`**: Converts the workflow dictionary to a YAML string and returns it.

```python
def convert_to_github_actions(jenkinsfile_path, output_path):
    with open(jenkinsfile_path, 'r') as file:
        jenkinsfile_content = file.read()

    stages = extract_stages(jenkinsfile_content)
    github_actions_content = generate_github_actions_yaml(stages)

    with open(output_path, 'w') as file:
        file.write(github_actions_content)

    print(f"GitHub Actions workflow has been written to {output_path}")
```
- **`def convert_to_github_actions(jenkinsfile_path, output_path):`**: Defines a function to convert a Jenkinsfile to a GitHub Actions workflow.
- **`with open(jenkinsfile_path, 'r') as file:`**: Opens the Jenkinsfile for reading.
- **`jenkinsfile_content = file.read()`**: Reads the content of the Jenkinsfile.
- **`stages = extract_stages(jenkinsfile_content)`**: Extracts the stages from the Jenkinsfile content.
- **`github_actions_content = generate_github_actions_yaml(stages)`**: Generates the GitHub Actions YAML content from the extracted stages.
- **`with open(output_path, 'w') as file:`**: Opens the output file for writing.
- **`file.write(github_actions_content)`**: Writes the generated YAML content to the output file.
- **`print(f"GitHub Actions workflow has been written to {output_path}")`**: Prints a message indicating that the workflow has been written.

```python
# Example usage
convert_to_github_actions('Jenkinsfile', '.github/workflows/ci-pipeline.yml')
```
- **`convert_to_github_actions('Jenkinsfile', '.github/workflows/ci-pipeline.yml')`**: Calls the function with the path to the Jenkinsfile and the desired output path for the GitHub Actions workflow.

This script dynamically generates the GitHub Actions workflow based on the content of the Jenkinsfile, avoiding hardcoding the YAML structure. If you have any specific requirements or need further customization, feel free to ask!
